{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Your API Title",
    "description": "Description of your API"
  },
  "paths": {
    "/add_agent_session": {
      "post": {
        "summary": "Add agent session",
        "description": "This route creates a new agent session by accepting a list of questions. Each question can have dependent questions. Dependent questions are only asked if parent question received a positive answer. The session is associated with a customer identified by the API key in the request header. If successful, it returns the entity ID and a URL that can be used by end-user to access the session.",
        "operationId": "addQuestions",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "description": "API key to authorize customer request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A JSON object.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "questions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string",
                          "description": "Main question text."
                        },
                        "dependent_questions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "description": "Dependent questions related to the main question."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entity_id": {
                      "type": "string",
                      "description": "The ID of the created session entity."
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL to access the created session."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid API key."
          }
        }
      }
    },
    "/get_question/{entity_id}": {
      "get": {
        "summary": "Get question",
        "description": "Retrieve the next unanswered question in session and its data.",
        "operationId": "getQuestion",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "description": "API key to authorize requests",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "description": "ID of the entity",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "question_text": {
                      "type": "string"
                    },
                    "question_mp3_url": {
                      "type": "string"
                    },
                    "main_question_id": {
                      "type": "integer"
                    },
                    "dependent_question_id": {
                      "type": "integer"
                    },
                    "total_questions": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/process_chunk/{entity_id}": {
      "post": {
        "summary": "Process user voice chunk",
        "description": "Process an audio chunk for a specific entity. Expects a .blob. Ideally with chunk duration <2s. Larger chunks increase agent response latency.",
        "operationId": "processChunk",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "description": "API key to authorize requests",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "description": "ID of the entity",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "main_question_id": {
                    "type": "integer"
                  },
                  "dependent_question_id": {
                    "type": "integer"
                  },
                  "final_chunk": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Audio chunk processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "Response was satisfactory.": {
                          "type": "string",
                          "example": "Response was satisfactory."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "clarification_question": {
                          "type": "string",
                          "example": "clarification question text"
                        },
                        "clarification_question_mp3_url": {
                          "type": "string",
                          "format": "uri",
                          "example": "url_for('stream_audio', entity_id=entity_id, idx_pair=idx_pair)"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/audio_stream/{entity_id}/{idx_pair}": {
      "get": {
        "summary": "Stream agent response",
        "description": "Stream agent response audio for a specific entity and question pair.",
        "operationId": "streamAudio",
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "description": "ID of the entity",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idx_pair",
            "in": "path",
            "required": true,
            "description": "Index pair of the questions",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audio stream successful",
            "content": {
              "audio/mpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root endpoint",
        "description": "Serve the main application page.",
        "operationId": "root",
        "responses": {
          "200": {
            "description": "Main page served successfully"
          }
        }
      }
    },
    "/generate_api_key": {
      "post": {
        "summary": "Generate API key",
        "description": "Generate a new global API key for your account based on credentials.",
        "operationId": "generateApiKey",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "API key generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "api_key": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/get_session_data": {
      "get": {
        "summary": "Get session data",
        "description": "Retrieve an array including all session data: questions and conversations related to your customer number identified by API key in the request header.",
        "operationId": "getSessionData",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "description": "API key to authorize the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of session data objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "Unique identifier for the session data."
                      },
                      "conversations": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "question_dep_index": {
                              "type": "integer",
                              "nullable": true,
                              "description": "Index of the dependent question if any."
                            },
                            "question_index": {
                              "type": "integer",
                              "description": "Index of the question in the session."
                            },
                            "server_text_response": {
                              "type": "string",
                              "description": "Text response from the server."
                            },
                            "user_audio_response_url": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "format": "uri",
                                "description": "URLs to the user's audio response."
                              }
                            },
                            "user_text_response": {
                              "type": "string",
                              "description": "User's text response."
                            }
                          }
                        }
                      },
                      "customer_id": {
                        "type": "string",
                        "description": "Identifier for the customer associated with this session."
                      },
                      "questions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "answered": {
                              "type": "boolean",
                              "description": "Indicator if the question has been answered."
                            },
                            "clarification_question": {
                              "type": "string",
                              "description": "Follow-up question asked for clarification if any."
                            },
                            "dependent_questions": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "description": "List of dependent questions."
                              }
                            },
                            "id": {
                              "type": "integer",
                              "description": "Unique identifier for the question."
                            },
                            "response_classified_as": {
                              "type": "string",
                              "description": "Classification of the response if available."
                            },
                            "text": {
                              "type": "string",
                              "description": "Text of the question."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - API key missing or invalid."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  }
}